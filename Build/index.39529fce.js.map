{"mappings":"ACMC,CAAA,KACG,aAEA,IAAM,EAAiB,IAAM,aAAa,OAAA,CAAQ,SAC5C,EAAiB,AAAA,GAAS,aAAa,OAAA,CAAQ,QAAS,GAExD,EAAoB,KACxB,IAAM,EAAc,WACpB,AAAI,GAIG,CAAA,OAAO,UAAA,CAAW,gCAAgC,OAAA,CAAU,OAAS,OAA5E,CACF,EAEM,EAAW,AAAA,IACX,AAAU,SAAV,GAAoB,OAAO,UAAA,CAAW,gCAAgC,OAAA,CACxE,SAAS,eAAA,CAAgB,YAAA,CAAa,gBAAiB,QAEvD,SAAS,eAAA,CAAgB,YAAA,CAAa,gBAAiB,EAE3D,EAEA,EAAS,KAET,IAAM,EAAkB,CAAC,EAAO,EAAQ,CAAA,CAAK,IAC3C,IAAM,EAAgB,SAAS,aAAA,CAAc,aAE7C,GAAI,CAAC,EACH,OAGF,IAAM,EAAoB,SAAS,aAAA,CAAc,kBAC3C,EAAkB,SAAS,aAAA,CAAc,0BACzC,EAAc,SAAS,aAAA,CAAc,CAAC,sBAAsB,EAAE,EAAM,EAAE,CAAC,EACvE,EAAiB,EAAY,aAAA,CAAc,WAAW,YAAA,CAAa,QAEzE,SAAS,gBAAA,CAAiB,yBAAyB,OAAA,CAAQ,AAAA,IACzD,EAAQ,SAAA,CAAU,MAAA,CAAO,UACzB,EAAQ,YAAA,CAAa,eAAgB,QACvC,GAEA,EAAY,SAAA,CAAU,GAAA,CAAI,UAC1B,EAAY,YAAA,CAAa,eAAgB,QACzC,EAAgB,YAAA,CAAa,OAAQ,GACrC,IAAM,EAAqB,CAAC,EAAE,EAAkB,WAAA,CAAY,EAAE,EAAE,EAAY,OAAA,CAAQ,YAAA,CAAa,CAAC,CAAC,CACnG,EAAc,YAAA,CAAa,aAAc,GAErC,GACF,EAAc,KADhB,EAGF,EAEA,OAAO,UAAA,CAAW,gCAAgC,gBAAA,CAAiB,SAAU,KAC3E,IAAM,EAAc,GACA,CAAA,UAAhB,GAA2B,AAAgB,SAAhB,GAC7B,EAAS,IAEb,GAEA,OAAO,gBAAA,CAAiB,mBAAoB,KAC1C,EAAgB,KAEhB,SAAS,gBAAA,CAAiB,yBACvB,OAAA,CAAQ,AAAA,IACP,EAAO,gBAAA,CAAiB,QAAS,KAC/B,IAAM,EAAQ,EAAO,YAAA,CAAa,uBAClC,EAAe,GACf,EAAS,GACT,EAAgB,EAAO,CAAA,EACzB,EACF,EACJ,EACF,CAAA","sources":["<anon>","src/assets/js/color-modes.js"],"sourcesContent":["var $ea6e0bb7dc490ac3$exports = {};\n/*!\r\n * Color mode toggler for Bootstrap's docs (https://getbootstrap.com/)\r\n * Copyright 2011-2023 The Bootstrap Authors\r\n * Licensed under the Creative Commons Attribution 3.0 Unported License.\r\n */ (()=>{\n    \"use strict\";\n    const getStoredTheme = ()=>localStorage.getItem(\"theme\");\n    const setStoredTheme = (theme)=>localStorage.setItem(\"theme\", theme);\n    const getPreferredTheme = ()=>{\n        const storedTheme = getStoredTheme();\n        if (storedTheme) return storedTheme;\n        return window.matchMedia(\"(prefers-color-scheme: dark)\").matches ? \"dark\" : \"light\";\n    };\n    const setTheme = (theme)=>{\n        if (theme === \"auto\" && window.matchMedia(\"(prefers-color-scheme: dark)\").matches) document.documentElement.setAttribute(\"data-bs-theme\", \"dark\");\n        else document.documentElement.setAttribute(\"data-bs-theme\", theme);\n    };\n    setTheme(getPreferredTheme());\n    const showActiveTheme = (theme, focus = false)=>{\n        const themeSwitcher = document.querySelector(\"#bd-theme\");\n        if (!themeSwitcher) return;\n        const themeSwitcherText = document.querySelector(\"#bd-theme-text\");\n        const activeThemeIcon = document.querySelector(\".theme-icon-active use\");\n        const btnToActive = document.querySelector(`[data-bs-theme-value=\"${theme}\"]`);\n        const svgOfActiveBtn = btnToActive.querySelector(\"svg use\").getAttribute(\"href\");\n        document.querySelectorAll(\"[data-bs-theme-value]\").forEach((element)=>{\n            element.classList.remove(\"active\");\n            element.setAttribute(\"aria-pressed\", \"false\");\n        });\n        btnToActive.classList.add(\"active\");\n        btnToActive.setAttribute(\"aria-pressed\", \"true\");\n        activeThemeIcon.setAttribute(\"href\", svgOfActiveBtn);\n        const themeSwitcherLabel = `${themeSwitcherText.textContent} (${btnToActive.dataset.bsThemeValue})`;\n        themeSwitcher.setAttribute(\"aria-label\", themeSwitcherLabel);\n        if (focus) themeSwitcher.focus();\n    };\n    window.matchMedia(\"(prefers-color-scheme: dark)\").addEventListener(\"change\", ()=>{\n        const storedTheme = getStoredTheme();\n        if (storedTheme !== \"light\" && storedTheme !== \"dark\") setTheme(getPreferredTheme());\n    });\n    window.addEventListener(\"DOMContentLoaded\", ()=>{\n        showActiveTheme(getPreferredTheme());\n        document.querySelectorAll(\"[data-bs-theme-value]\").forEach((toggle)=>{\n            toggle.addEventListener(\"click\", ()=>{\n                const theme = toggle.getAttribute(\"data-bs-theme-value\");\n                setStoredTheme(theme);\n                setTheme(theme);\n                showActiveTheme(theme, true);\n            });\n        });\n    });\n})();\n\n\n//# sourceMappingURL=index.39529fce.js.map\n","/*!\r\n * Color mode toggler for Bootstrap's docs (https://getbootstrap.com/)\r\n * Copyright 2011-2023 The Bootstrap Authors\r\n * Licensed under the Creative Commons Attribution 3.0 Unported License.\r\n */\r\n\r\n(() => {\r\n    'use strict'\r\n  \r\n    const getStoredTheme = () => localStorage.getItem('theme')\r\n    const setStoredTheme = theme => localStorage.setItem('theme', theme)\r\n  \r\n    const getPreferredTheme = () => {\r\n      const storedTheme = getStoredTheme()\r\n      if (storedTheme) {\r\n        return storedTheme\r\n      }\r\n  \r\n      return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light'\r\n    }\r\n  \r\n    const setTheme = theme => {\r\n      if (theme === 'auto' && window.matchMedia('(prefers-color-scheme: dark)').matches) {\r\n        document.documentElement.setAttribute('data-bs-theme', 'dark')\r\n      } else {\r\n        document.documentElement.setAttribute('data-bs-theme', theme)\r\n      }\r\n    }\r\n  \r\n    setTheme(getPreferredTheme())\r\n  \r\n    const showActiveTheme = (theme, focus = false) => {\r\n      const themeSwitcher = document.querySelector('#bd-theme')\r\n  \r\n      if (!themeSwitcher) {\r\n        return\r\n      }\r\n  \r\n      const themeSwitcherText = document.querySelector('#bd-theme-text')\r\n      const activeThemeIcon = document.querySelector('.theme-icon-active use')\r\n      const btnToActive = document.querySelector(`[data-bs-theme-value=\"${theme}\"]`)\r\n      const svgOfActiveBtn = btnToActive.querySelector('svg use').getAttribute('href')\r\n  \r\n      document.querySelectorAll('[data-bs-theme-value]').forEach(element => {\r\n        element.classList.remove('active')\r\n        element.setAttribute('aria-pressed', 'false')\r\n      })\r\n  \r\n      btnToActive.classList.add('active')\r\n      btnToActive.setAttribute('aria-pressed', 'true')\r\n      activeThemeIcon.setAttribute('href', svgOfActiveBtn)\r\n      const themeSwitcherLabel = `${themeSwitcherText.textContent} (${btnToActive.dataset.bsThemeValue})`\r\n      themeSwitcher.setAttribute('aria-label', themeSwitcherLabel)\r\n  \r\n      if (focus) {\r\n        themeSwitcher.focus()\r\n      }\r\n    }\r\n  \r\n    window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', () => {\r\n      const storedTheme = getStoredTheme()\r\n      if (storedTheme !== 'light' && storedTheme !== 'dark') {\r\n        setTheme(getPreferredTheme())\r\n      }\r\n    })\r\n  \r\n    window.addEventListener('DOMContentLoaded', () => {\r\n      showActiveTheme(getPreferredTheme())\r\n  \r\n      document.querySelectorAll('[data-bs-theme-value]')\r\n        .forEach(toggle => {\r\n          toggle.addEventListener('click', () => {\r\n            const theme = toggle.getAttribute('data-bs-theme-value')\r\n            setStoredTheme(theme)\r\n            setTheme(theme)\r\n            showActiveTheme(theme, true)\r\n          })\r\n        })\r\n    })\r\n  })()\r\n  "],"names":["getStoredTheme","localStorage","getItem","setStoredTheme","theme","setItem","getPreferredTheme","storedTheme","window","matchMedia","matches","setTheme","document","documentElement","setAttribute","showActiveTheme","focus","themeSwitcher","querySelector","themeSwitcherText","activeThemeIcon","btnToActive","svgOfActiveBtn","getAttribute","querySelectorAll","forEach","element","classList","remove","add","themeSwitcherLabel","textContent","dataset","bsThemeValue","addEventListener","toggle"],"version":3,"file":"index.39529fce.js.map"}